//--------------------------------------
//--- 010 Editor v3.1 Binary Template
//
// File:    brg.bt
// Author:  Petar Tasev
// Revision:1.0
// Purpose: Highlight brg files from AoM game.
//--------------------------------------
LittleEndian();

typedef uint16 hfloat <read=h2floatRead>;

string h2floatRead( const hfloat &v )
{
   byte currData[2];
   ConvertDataToBytes(v, currData);

   byte data[4];
   data[0] = 0;
   data[1] = 0;
   data[2] = currData[0];
   data[3] = currData[1];
   float  fValue;
   fValue = ConvertBytesToFloat(data);
   
   string s;
   SPrintf( s, "%f", fValue );
   return s;
}
string hfloatRead( const hfloat &v )
{
   uint32 dataValue;
   float  fValue;
   
   dataValue = 0;
   
   if (v & 0x7C00)
   {
      dataValue = ((v & 0x7C00) + 0x1C000) << 13;
   }
   
   dataValue |= ((v & 0x8000) << 16) | ((v & 0x03FF) << 13);
   
   string s;
   SPrintf( s, "%x", dataValue );
   SScanf( s, "%x", fValue );
   SPrintf( s, "%f", fValue );
   return s;
}

    typedef enum <uint16> {
        ANIMVERTCOLORALPHA  = 0x0001, // animated vertex color alpha
        TEXCOORDSA          = 0x0002, // Mesh has first set of tex coords
        MULTTEXCOORDS       = 0x0004, // mesh has texture coords sets 2..n
        ANIMATEDMESH        = 0x0008, // Deprecated - Not used after revision 0x0008
        RESERVED            = 0x0010, // ?
        COLORCHANNEL        = 0x0020, // Mesh has a vertex color channel
        MATERIAL            = 0x0040, // Mesh has material data
        BUMPMAPINFO         = 0x0080, // Mesh has bump/normal map info
        ATTACHPOINTS        = 0x0100, // Mesh contains dummy objects
        NOZBUFFER           = 0x0200, // mesh should not be rendered with z-testing
        SECONDARYMESH       = 0x0400, // Secondary Mesh 2..n
        ANIMTEXCOORDS       = 0x0800, // Mesh contains animated tex coords
        PARTICLESYSTEM      = 0x1000, // Mesh is a Particle System
        PARTICLEPOINTS      = 0x2000, // Mesh vertices are treated as particle points with radii
        COLORALPHACHANNEL   = 0x4000, // Vertex color channel is treated as alpha channel
        ANIMVERTCOLORSNAP   = 0x8000 // Animated vertex colors snap between keyframes
    } MeshFlags <read=readMeshFlags>; // Core Flags A

    typedef enum <uint16> {
        BILLBOARD           = 0x0001, // rotates with the player view
        ANIMTEXCOORDSNAP    = 0x0002, // Animated UV/animated texture coords snap between keyframes
        HASFACENORMALS      = 0x0004, // has face normals
        ANIMATED            = 0x0008, // animation length included in extended header
        KEYFRAMESNAP        = 0x0010, // keyframe snap, not smooth
        NOLOOPANIMATE       = 0x0020, // don't animate Last-First frame
        MFRESRVED0          = 0x0040, // ?
        FACEGROUPMAP        = 0x0080, // Mesh has face group list
        STRIPPED            = 0x0100  // Mesh data is stripped
    } MeshFormat; // Core Flags B

    typedef enum <byte> {
        KEYFRAME    = 0x0001, // keyframe based animation
        NONUNIFORM  = 0x0002, // Non-uniform animation
        SKINBONE    = 0x0004 // Skinned Animation
    } MeshAnimType; // BRG Animation Type

string readMeshFlags (local MeshFlags &flags)
{
	local string s = "";
	local int commaNeeded = 0;
	local MeshFlags i = 1;

	SPrintf (s, "%x: ", flags);
	while (i < ANIMVERTCOLORSNAP) 
	{
        //Printf("'%u'?", i);
		if (flags & i)
		{
			if (commaNeeded) 
			{ s += ", "; }
			s +=  EnumToString(i);
			commaNeeded = 1;
		}
		i = i << 1;
	}
	return s;
}
int meHasFlag(MeshFlags &flags, MeshFlags flag)
{
    return (flags & flag) == flag;
}

typedef struct (int size) {
    local int tmp;
    for (tmp = 0; tmp < size; tmp++)
        hfloat val;
} Vector <optimize=true>;
typedef struct (int size) {
    local int tmp;
    for (tmp = 0; tmp < size; tmp++)
        int16 val;
} VectorInt16 <optimize=true>;
typedef struct (int size) {
    local int tmp;
    for (tmp = 0; tmp < size; tmp++)
        float val;
} VectorFloat <optimize=true>;

struct {
    struct HEADER {
        char magic[4];
        int unknown01;
        int numMaterials;
        int unknown02;
        int numMeshes;
        int space;
        byte revision;
        byte padding[3]; //unknown03
    } header;

    if (header.numMeshes > 1) {
        struct {
            char asetHead[4];
            int numFrames;
            float frameStep;
            float animTime <comment="Time required to complete loop of all frames">;
            float frequency;
            float spf;
            float fps;
            int space;
        } asetHeader;
    }

    local int meshID = 0;

    struct Mesh {
        char meshHead[4];
        int16 version; // always 22
        MeshFormat meshFormat; // Mesh Core Flags B
        int16 numVertices;
        int16 numFaces;
        byte interpolationType;
        MeshAnimType animationType; // specialProp
        int16 userDataEntryCount;
        VectorFloat objectCenter(3);
        float centerRadius <comment="Could be longest axis length of boundingBoxMax">; // unknown03
        VectorFloat massPos(3) <comment="Always 0">; // always 0 for all 3
        VectorFloat hotspotPos(3);
        int16 extendedHeaderSize <comment="Always 40">; // always 40 (unknown04)
        MeshFlags properties; // Mesh Core Flags A
        VectorFloat boundingBoxMin(3);
        VectorFloat boundingBoxMax(3);
        Vector vertices(3)[numVertices];
        Vector normals(3)[numVertices];

        local int i = 0;

        if (!((properties & SECONDARYMESH) == SECONDARYMESH) || ((properties & ANIMTEXCOORDS) == ANIMTEXCOORDS)) {
            if ((properties & TEXCOORDSA) == TEXCOORDSA) {
                Vector texVert(2)[numVertices];
            }
        }
        if (!((properties & SECONDARYMESH) == SECONDARYMESH)) {
            if ((properties & MATERIAL) == MATERIAL) {
                int16 faceMat[numFaces];
            }

            VectorInt16 faceVert(3)[numFaces];

            if ((properties & MATERIAL) == MATERIAL) {
                int16 vertMat[numVertices];
            }
        }

        struct {
            int16 numIndex0 <comment="Unused">; // same as values in attachpoints, could be unused now
            int16 numMatrix0 <comment="Unused">; // same as values in attachpoints, could be unused
            int16 nameLength; // ?? unknown091 (still need to figure out)
            int16 pointMaterial; // ??
            float pointRadius <comment="Always 0">; // unknown09Unused always 0
            byte materialCount;
            byte padding[3] <comment="Used to be int with matCount">; // still not sure but definitely dealing with materials in the mesh
            float animTime <comment="this is what really matters for the animation length of the model">;
            int materialLibraryTimestamp <comment="Always 191738312, 1032824281 for TT">; // always the same value, one for aom, one for tt models, unknown09const
            int16 checkSpace <comment="Always 0">; // always 0
            hfloat unknown09e <comment="Unused">; // 0 for almost everything, could be unused now
            float exportedScaleFactor; // timeMult, some sort of timing multiplier, adjustment?
            int nonUniformKeyCount; //09c
            int uniqueMaterialCount; // how many materials are used in a mesh, could be byte, with 3 padding afterwards
        } extendedHeader;

        if ((((properties & COLORALPHACHANNEL) == COLORALPHACHANNEL || (properties & COLORCHANNEL) == COLORCHANNEL) && !((properties & SECONDARYMESH) == SECONDARYMESH)) || (properties & ANIMVERTCOLORALPHA) == ANIMVERTCOLORALPHA) {
            struct VertColor {
                ubyte B;
                ubyte G;
                ubyte R;
                ubyte A;
            } vertexColor[numVertices];
        }

        if ((properties & ATTACHPOINTS) == ATTACHPOINTS) {
            struct DummyObject
            {
                struct DummyObjectHeader {
                    uint16 numDummyObjects <comment="This is number of dummies">;
                    uint16 numDummyEntry;
                    byte version <comment="Always 1">;
                    byte unused;
                } dummyObjectHeader;
    
                Vector upVector(3)[dummyObjectHeader.numDummyObjects];
                Vector fwdVector(3)[dummyObjectHeader.numDummyObjects];
                Vector rightVector(3)[dummyObjectHeader.numDummyObjects];
                Vector position(3)[dummyObjectHeader.numDummyObjects];
                Vector boundingBoxMina(3)[dummyObjectHeader.numDummyObjects];
                Vector boundingBoxMaxa(3)[dummyObjectHeader.numDummyObjects];
    
                struct DummyLookupEntry {
                    byte dummyCount;
                    byte padding[3];
                    int dummyIndicesArrayPtr;
                } dummyList[dummyObjectHeader.numDummyEntry] <optimize=true>;

                local int32 numPoints = 0;
                for (i = 0; i < dummyObjectHeader.numDummyEntry; i++) {
                    numPoints += dummyList[i].dummyCount;
                }
                //unknown12
    
                byte pointIndex[numPoints]; //unknown13
            } dummyObject;
        }

        // checkSpace is always 0 anyway, this block happens only on first frames, with variable anim set in specialProps
        if (!extendedHeader.checkSpace && extendedHeader.nonUniformKeyCount) {
            float variableSpeed[extendedHeader.nonUniformKeyCount] <comment="mesh[x].StartTime = animTime * varSpeed[x]">;
        }

        meshID++;
    } item[header.numMeshes] <optimize=false>;

    if ((item[0].properties & MATERIAL) == MATERIAL) {
        struct Material { // STILL HAVEN'T THOROUGHLY LOOKED AT MATERIALS
            char mtrlHead[4];
            int id;
            struct BrgMatFlagField {
                uint HasTexture : 1;
                uint Updateable : 1;
                uint UseColors : 1;
                uint Specular : 1;
                uint WrapUTx1 : 1;
                uint WrapVTx1 : 1;
                uint WrapUTx2 : 1;
                uint WrapVTx2 : 1;
                uint WrapUTx3 : 1;
                uint WrapVTx3 : 1;
                uint TwoSided : 1;
                uint PlayerXFormColor1 : 1;
                uint PlayerXFormColor2 : 1;
                uint PlayerXFormTx1 : 1;
                uint PlayerXFormTx2 : 1;
                uint BumpMap : 1;
                uint Reserved : 1;
                uint SpecularExponent : 1;
                uint PixelXForm1 : 1;
                uint PixelXForm2 : 1;
                uint FaceMap : 1;
                uint AdditiveBlend : 1;
                uint SubtractiveBlend : 1;
                uint Alpha : 1;
                uint PlayerXFormColor3 : 1;
                uint PixelXForm3 : 1;
                uint CubeMapInfo : 1;
                uint InverseAlpha : 1;
                uint AdditiveCubeBlend : 1;
            } flags;
            float reserved;
            int nameLength;
            VectorFloat ambient(3); //unknown02 [36 bytes]
            VectorFloat diffuse(3);
            VectorFloat specular(3);
            VectorFloat emissive(3); //unknown03 [12 bytes]
    
            char name[nameLength];
            if (flags.BumpMap == 1)
            {
                int nameLength2;
                char name2[nameLength2];
            }

            if (flags.SpecularExponent == 1) {
                float specularLevel;
            }

            if (flags.Alpha == 1)
            {
                float alpha; //unknown04
            }

            if (flags.CubeMapInfo == 1) {
                struct CubeMapInfo {
                    byte mode <comment="Always 0">; // always 1
                    byte txFactor <comment="Always 30, 40 for TT">; // always 30/40 for tt
                    byte cubeMapNameLength;
                    byte textureMapNameLength;
                    if (cubeMapNameLength > 0) char cubeMapName[cubeMapNameLength];
                    if (textureMapNameLength > 0) char textureMapName[textureMapNameLength];
                } cubeMapInfo;
            }
        } material[header.numMaterials] <optimize=false>;
    }
} file;