//--------------------------------------
//--- 010 Editor v5.0 Binary Template
//
// File: mtrl.bt
// Author: Petar Tasev
// Revision: 1.0
// Purpose: MTRL files from AoM:EE.
//--------------------------------------
LittleEndian();

typedef enum <int> {
    MaterialAlphaOff                        = 0,
    MaterialAlphaOneBit                     = 1,
    MaterialAlphaOn                         = 2,
    MaterialAlphaLightmap                   = 3,
    MaterialAlphaLightmapInAlpha            = 4,
    MaterialAlphaInvertedLightmapInAlpha    = 5,
    MaterialAlphaAdditive                   = 6,
    MaterialAlphaAdditiveSquared            = 7,
    MaterialAlphaAdditiveModulateSrcAlpha   = 8,
    MaterialAlphaSubtractive                = 9,
    MaterialAlphaTexture
} AlphaMode;

typedef enum <int> {
    ColorTransformNone      = 0,
    ColorTransform1         = 1,
    ColorTransform2         = 2,
    ColorTransform3         = 3,
    ColorTransformPixel1    = 4,
    ColorTransformPixel2    = 5,
    ColorTransformPixel3    = 6,
} ColorTransformMode;

typedef enum <int> {
    TextureTransformNone    = 0,
    TextureTransform1       = 1,
    TextureTransform2       = 2
} TextureTransformMode;

typedef enum <int> {
    MultitextureOff                                     = 0,
    MultitextureOffNoVtxAlpha                           = 1,
    MultitextureOffNoTx                                 = 2,
    MultitextureOffOnlyAlpha                            = 3,
    MultitextureLinearBlend                             = 4,
    MultitextureEmissiveSpecularFactor                  = 5,
    MultitextureEmissiveSpecularFactorNoTx              = 6,
    MultitextureSpecularBump                            = 7,
    MultitextureLinearBlendAlpha                        = 8,
    MultitextureLinearBlendInverseAlpha                 = 9,
    MultitextureLinearBlendAlphaEmissiveSpecularFactor  = 10,
    MultitextureLinearBlendEmissiveSpecularFactor       = 11,
    MultitextureAddFactor                               = 12,
    MultitextureAddAlpha                                = 13,
    MultitextureAddInverseAlpha                         = 14,
    MultitextureSeparateAlpha                           = 15,
    MultitextureLightmap                                = 16,
    MultitextureFogMask                                 = 17,
    MultitextureFadeLightmapByAlpha                     = 18
} MultitextureMode;

typedef enum <int>
{
    TexGenDisable,
    TexGenCubicEnvironment,
    TexGenFakeReflection,
    TexGenXZPosition
} TexGenMode;

// Begin read
uint magic;
uint nameLength;
uint secTexLength;
uint bumpMapLength;
uint specMapLength;
uint glossMapLength;
uint emissiveMapLength;

float diffuse[3];
float ambient[3];
float specular[3];
float emissive[3];
float specularPower;
float alpha;

int id;
byte selfIlluminating;
byte clampU;
byte clampV;
byte lightSpecular;
byte affectsAmbient;
byte affectsDiffuse;
byte affectsSpecular;
byte updateable;

AlphaMode alphaMode; // Seems to be very often 10, wave has a 2 here, phoenix has 6
float ambientIntensity;
float diffuseIntensity;
float specularIntensity;
float emissiveIntensity;
ColorTransformMode colorTransform; // Val of 4 seems to be PC
TextureTransformMode textureTransform;
DWORD textureFactor; // Has something to do with Cube Map
MultitextureMode multiTextureMode; // Has something to do with Cube Map
TexGenMode texGenMode0;
TexGenMode texGenMode1; // Has something to do with Cube Map
int texCoordSet0;
int texCoordSet1;
int texCoordSet2;
int texCoordSet3;
int texCoordSet4;
int texCoordSet5;
int texCoordSet6;
int texCoordSet7;

int textureIndex;
int secondaryTextureIndex;
int bumpMapIndex;

int specMapIndex;
int glossMapIndex;
int emissiveMapIndex;

int reserved[4];

if (nameLength > 0)
    string texture;

if (secTexLength > 0)
    string secondaryTexture;

if (bumpMapLength > 0)
    string bumpMap;

if (specMapLength > 0)
    string specMap;

if (glossMapLength > 0)
    string glossMap;

if (emissiveMapLength > 0)
    string emissiveMap;