//--------------------------------------
//--- 010 Editor v5.0 Binary Template
//
// File:    prt.bt
// Author:  Petar Tasev
// Revision:1.0
// Purpose: Highlight prt files from AoM game.
//--------------------------------------
LittleEndian();

typedef ubyte bool;

typedef enum 
{ 
    PSPA_INVALID = -1, PSPA_BILLBOARD, PSPA_AXIAL_BILLBOARD, PSPA_UP_FACING, PSPA_GEOMETRY
} PrtAppearanceType;

typedef enum 
{ 
    PSES_INVALID = -1, PSES_POINT, PSES_BOX_SOLID, PSES_BOX_SURFACE, PSES_BOX_HOLLOW, PSES_ELLIPSOID_SOLID, PSES_ELLIPSOID_SURFACE, PSES_ELLIPSOID_HOLLOW, PSES_HALF_ELLIPSOID_SOLID, PSES_HALF_ELLIPSOID_SURFACE, PSES_HALF_ELLIPSOID_HOLLOW, PSES_RECTANGLE, PSES_CIRCLE
} PrtShapeType;

typedef enum 
{ 
    PSMS_INVALID = -1, PSMS_NORMAL, PSMS_ADDITIVE, PSMS_SUBTRACTIVE
} PrtMaterialType;

typedef enum 
{ 
    PSTI_INVALID = -1, PSTI_FIXED, PSTI_MIN, PSTI_MAX,
} PrtTerrainInteractionType;

typedef struct
{
    uint32 StringLength;
    wchar_t String[StringLength];
} PrtString <read=ReadPrtString>;
string ReadPrtString( PrtString &a )
{
    if (a.StringLength == 0)
    {
        return "";
    }

    return (string)a.String;
}

typedef struct
{
    ubyte R;
    ubyte G;
    ubyte B;
    ubyte A;
} RGBAColor <read=ReadRGBAColor>;
string ReadRGBAColor( RGBAColor &a )
{
    string s;
    SPrintf( s, "#%02X%02X%02X%02X", (int)a.R, (int)a.G, (int)a.B, (int)a.A );
    return s;
}

struct {
    int32 version;

    struct {
        bool TiedToEmitter;
        bool IgnoreRotation;
        bool EmitByMotion;
        bool Loop;
        bool InheritVelocity;
        bool UseMinVelocity;
        bool UseMaxVelocity;
        bool AlwaysActive;
        if (version >= 12)
        {
            bool SyncWithAttackAnim;
            byte padding[3];
        }
        int32 MaxParticles;
        PrtAppearanceType AppearanceType;
        float UpdateRadius;
        float MaxParticlesVar;
        float ParticleLife;
        float ParticleLifeVar;
        float GlobalFadeIn;
        float GlobalFadeInVar;
        float GlobalFadeOut;
        float GlobalFadeOutVar;
        float EmitDistance;
        float EmitDistanceVar;
        float EmissionRate;
        float EmissionRateVar;
        float InitialDormancy;
        float InitialDormancyVar;
        float InitialUpdate;
        float InitialUpdateVar;
        float EmissionTime;
        float EmissionTimeVar;
        float DormantTime;
        float DormantTimeVar;
        float InitialDistance;
        float InitialDistanceVar;
        float InitialVelocity;
        float InitialVelocityVar;
        float Acceleration;
        float AccelerationVar;
        float InheritInfluence;
        float InheritInfluenceVar;
        float MinVelocity;
        float MinVelocityVar;
        float MaxVelocity;
        float MaxVelocityVar;
    } Emitter;

    struct {
        bool StartFull;
        bool EmitAwayFromBias;
        bool UseSpreader;
        byte padding;
        PrtShapeType ShapeType;
        float OuterXRadius;
        float InnerXRadius;
        float OuterYRadius;
        float InnerYRadius;
        float OuterZRadius;
        float InnerZRadius;
        float CenterHeight;
        float OffAxis;
        float OffAxisSpread;
        float OffPlane;
        float OffPlaneSpread;
        float BiasPointHeight;
    } Shape;

    struct {
        bool OrientByMotion;
        byte padding[3];
        int32 NumFiles;
        int32 NumFrames;
        int32 FrameWidth;
        int32 FrameHeight;
        PrtMaterialType MaterialType;
        RGBAColor Emissive;
        RGBAColor Specular;
        float SpecularExponent;
        float FramesPerSecond;
        float AnimationRate;
        float AnimationRateVar;
    } Appearance;

    struct {
        bool LoopingCycle;
        byte padding[3];
        int32 NumStages;
        float Opacity;
        float OpacityVar;
        float CycleTime;
        float CycleTimeVar;
    } Opacity;

    struct {
        bool LoopingCycle;
        byte padding[3];
        int32 NumStages;
        float Scale;
        float ScaleVar;
        float XScale;
        float XScaleVar;
        float YScale;
        float YScaleVar;
        float ZScale;
        float ZScaleVar;
        float CycleTime;
        float CycleTimeVar;
    } Scale;

    struct {
        bool UsePalette;
        bool LoopingCycle;
        byte padding[2];
        int32 NumPaletteColors;
        int32 NumStages;
        float CycleTime;
        float CycleTimeVar;
        float WorldLightingInfluence;
        RGBAColor Color;
    } Color;

    struct {
        bool RandomOrientation;
        bool Tumble;
        bool TumbleBothDirections;
        bool RandomAxis;
        float InternalGravity;
        float InternalGravityVar;
        float InternalWindDirection;
        float InternalWindDirectionVar;
        float InternalWindSpeed;
        float InternalWindSpeedVar;
        float InternalWindDelay;
        float InternalWindDelayVar;
        float ExternalWindInfluence;
        float ExternalWindInfluenceVar;
        float ExternalWindDelay;
        float ExternalWindDelayVar;
        float MinAngularVelocity;
        float MaxAngularVelocity;
        float XAxis;
        float XAxisVar;
        float YAxis;
        float YAxisVar;
        float ZAxis;
        float ZAxisVar;
    } Forces;

    struct {
        int32 NumTypes;
        PrtTerrainInteractionType TerrainInteractionType;
        float TerrainHeight;
        float TerrainHeightVar;
    } Collision;

    PrtString BrgFilename;

    uint32 PaletteColors[Color.NumPaletteColors];

    float AppearanceWeights[Appearance.NumFiles];

    PrtString AppearanceFiles[Appearance.NumFiles] <optimize=false>;

    struct OpacityStage {
        float Opacity;
        float OpacityVar;
        float Hold;
        float Fade;
    } OpacityStages[Opacity.NumStages];

    struct ScaleStage {
        float Scale;
        float ScaleVar;
        float Hold;
        float Fade;
    } ScaleStages[Scale.NumStages];

    struct ColorStage {
        bool UsePalette;
        byte padding[3];
        RGBAColor Color;
        float Hold;
        float Fade;
    } ColorStages[Color.NumStages];

    struct CollisionType {
        bool SpawnSystem;
        bool CollideTerrain;
        bool CollideWater;
        bool CollideUnits;
        int32 Result;
        int32 NumFileNames;
        float LingerTime;
        float LingerTimeVar;
        float FadeTime;
        float FadeTimeVar;
        float EnergyLoss;
        float EnergyLossVar;
        PrtString Name;
        PrtString FileNames[NumFileNames] <optimize=false>;
    } Collisions[Collision.NumTypes] <optimize=false>;
} file;
